version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy Environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${GENERIC_ID}" 
            aws s3 rm s3://udapeople-${GENERIC_ID} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${GENERIC_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: c4c12387-3106-4872-872e-3e64d7fdf6e2" \
              --request GET https://api.memstash.io/values/MIGRATION_STATUS_${GENERIC_ID})
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm i
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
           - backend-build
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-build
          paths: 
            - backend/node_modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: 
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${GENERIC_ID}" \
              --parameter-overrides ID="${GENERIC_ID}" \
              --tags project=udapeople
      - run: 
          name: Add Backend IP to ansible inventory and to Memstash
          command: |
            # --filters "Name=tag:project, Values=udapeople" \
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_IP" >> inventory.txt
            cat inventory.txt
            curl -H "Content-Type: text/plain" -H "token: c4c12387-3106-4872-872e-3e64d7fdf6e2" \
            --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL_${GENERIC_ID}
            echo BACKEND_URL_${GENERIC_ID}
      - run: 
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${GENERIC_ID}" \
              --parameter-overrides ID="${GENERIC_ID}" \
              --tags project=udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: ${GENERIC_ID}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "37:00:66:b0:ae:44:ac:ef:92:13:9f:7d:e3:a1:a3:60"
      - attach_workspace:
          at: ~/
      - run:
          name: Install Dependencies
          command: |
              apk add --update ansible nodejs npm 
      - run:
          name: Configure Infrastructure
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"

            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment:
          id: ${GENERIC_ID}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"

            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            cd backend
            npm i
            npm run migrations >> migration_messg.txt
            cat migration_messg.txt
            status=$(cat migration_messg.txt | grep -c "has been executed successfully")
            echo $status
            if [ $status > 0 ]; then exit 0; else exit 1; fi;
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: c4c12387-3106-4872-872e-3e64d7fdf6e2" \
            --request PUT --data "1" https://api.memstash.io/values/MIGRATION_STATUS_${GENERIC_ID}
      - destroy-environment:
          id: ${GENERIC_ID}
      - revert-migrations

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
            npm i webpack-dev-server -g
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: c4c12387-3106-4872-872e-3e64d7fdf6e2" \
              --request GET https://api.memstash.io/values/BACKEND_URL_${GENERIC_ID})
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            echo "${API_URL}"

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy-infrastructure
          # requires:
            # - build-frontend
            # - build-backend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend:
          requires:
            - deploy-infrastructure