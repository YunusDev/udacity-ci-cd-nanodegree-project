version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy Environments
          when: on_fail
          command: |
            # aws cloudformation delete-stack --stack-name "udapeople-backend-${GENERIC_ID}" 
            # aws s3 rm s3://udapeople-${GENERIC_ID} --recursive
            # aws cloudformation delete-stack --stack-name "udapeople-frontend-${GENERIC_ID}"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths:
            - frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
           - backend-build
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-build
          paths: 
            - backend/node_modules

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Run Frontend Test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Run Backend Test
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
  deploy-infrastructure:
    docker: 
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: 
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${GENERIC_ID}" \
              --parameter-overrides ID="${GENERIC_ID}" \
              --tags project=udapeople
      - run: 
          name: Add Backend IP to ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            # --filters "Name=tag:Name, Values=backend-${GENERIC_ID}"
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_IP" >> inventory.txt
            cat inventory.txt
      - run:
          name: Add Backend URL to MemStash
          command: |
            curl -H "Content-Type: text/plain" -H "token: e51b7efc-9353-4a51-befe-02f41ff9506c" --request PUT \ 
            --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - run: 
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${GENERIC_ID}" \
              --parameter-overrides ID="${GENERIC_ID}" \
              --tags project=udapeople
      
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy_environment:
          id: ${GENERIC_ID}
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy-infrastructure:
          requires:
            - build-frontend
            - build-backend